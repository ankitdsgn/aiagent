"use client";

import styles from "./VaraitionItem.module.css";
import { Flex, Progress } from "antd";
import { useEffect, useState } from "react";
import {
  motion,
  MotionConfig,
  useMotionValue,
  useSpring,
  useReducedMotion,
} from "framer-motion";

export default function VariationItem() {
  const prefersReduced = useReducedMotion();

  // Progress animation (smooth spring)
  const target = 60;
  const mv = useMotionValue(0);
  const spring = useSpring(mv, {
    stiffness: 120,
    damping: 26,
    mass: 1.05,
  });
  const [percent, setPercent] = useState(0);

  useEffect(() => {
    const unsub = spring.on("change", (v) => setPercent(Math.round(v)));
    mv.set(target);
    return () => unsub();
  }, [mv, spring]);

  return (
    <MotionConfig
      transition={
        prefersReduced
          ? { duration: 0 }
          : { duration: 0.38, ease: [0.22, 1, 0.36, 1] } // smooth ease-out (expo-ish)
      }
      reducedMotion="user"
    >
      <motion.div
        className={styles["variation-item"]}
        initial={prefersReduced ? false : { opacity: 0, y: 10, scale: 0.995 }}
        animate={prefersReduced ? {} : { opacity: 1, y: 0, scale: 1 }}
        whileHover={prefersReduced ? {} : { y: -2, scale: 1.002 }}
        whileTap={prefersReduced ? {} : { scale: 0.992 }}
        style={{ willChange: "transform, opacity" }}
        layout // smooth layout shifts
      >
        {/* ---- Top Section ---- */}
        <div className={styles["variation-top-cont"]}>
          <motion.div
            className={styles["variation-top-head"]}
            initial={prefersReduced ? false : { opacity: 0, y: 6 }}
            animate={prefersReduced ? {} : { opacity: 1, y: 0 }}
          >
            TEMPERATURE
          </motion.div>

          <motion.div
            className={styles["variation-top-metric"]}
            initial={prefersReduced ? false : { opacity: 0, y: 6 }}
            animate={prefersReduced ? {} : { opacity: 1, y: 0 }}
            layout
          >
            <p className={styles["variation-top-metric-text"]}>Custom metric</p>

            <motion.div
              initial={prefersReduced ? false : { opacity: 0 }}
              animate={prefersReduced ? {} : { opacity: 1 }}
              layout
            >
              <Progress
                strokeColor={["var(--primary)", "var(--primary)", "#f50"]}
                percent={percent}
                steps={3}
              />
            </motion.div>
          </motion.div>
        </div>

        {/* ---- Bottom Section ---- */}
        <div className={styles["variation-bottom-cont"]}>
          <motion.p
            className={styles["variation-text"]}
            initial={prefersReduced ? false : { opacity: 0, y: 8 }}
            animate={prefersReduced ? {} : { opacity: 1, y: 0 }}
            style={{ willChange: "transform, opacity" }}
            layout
          >
            Your mug, but smarter, keeping coffee just right while the app syncs
            with your morning routine to make every moment smoother. Different
            button styles generated by setting Button properties. The
            recommended order is.
          </motion.p>

          <Flex
            className={styles["variation-metric-cont"]}
            gap={12}
            wrap="wrap"
          >
            {[
              { label: "Coherence", value: "0.6", delay: 0.04 },
              { label: "Temp", value: "0.6", delay: 0.08 },
              { label: "Top p", value: "0.6", delay: 0.12 },
            ].map((m) => (
              <motion.div
                key={m.label}
                className={styles["variation-metric"]}
                initial={
                  prefersReduced
                    ? false
                    : { opacity: 0, y: 6, filter: "blur(2px)" }
                }
                animate={
                  prefersReduced
                    ? {}
                    : {
                        opacity: 1,
                        y: 0,
                        filter: "blur(0px)",
                        transition: { delay: m.delay },
                      }
                }
                whileHover={prefersReduced ? {} : { scale: 1.015 }}
                style={{ willChange: "transform, opacity, filter" }}
                layout
              >
                <p className={styles["variation-metric-label"]}>{m.label}</p>
                <p className={styles["variation-metric-value"]}>{m.value}</p>
              </motion.div>
            ))}
          </Flex>
        </div>
      </motion.div>
    </MotionConfig>
  );
}
